library(usethis)
use_roxygen_md()
use_testthat()
use_pipe()
devtools::document()
df <- read.csv("/Users/aditigajjar/Desktop/Stat541/suggestCocktail/R/all_drinks.csv")
View(df)
#' Load Recipes
#'
#' Load and clean a database of cocktail recipes.
#'
#' @return A data.frame containing the cleaned cocktail recipes.
#' @export
load_recipes <- function() {
file_path <- system.file("extdata", "all_drinks.csv", package = "CocktailMixer")
recipes <- read_csv(file_path)
# Combine ingredient columns into a single column
ingredient_columns <- grep("^strIngredient", names(recipes), value = TRUE)
recipes$Ingredients <- apply(recipes[ingredient_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Combine measurement columns into a single column
measure_columns <- grep("^strMeasure", names(recipes), value = TRUE)
recipes$Measurements <- apply(recipes[measure_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Keep only necessary columns
recipes <- recipes[, c("strDrink", "idDrink", "strAlcoholic", "strCategory", "Ingredients", "Measurements", "strInstructions")]
# Remove rows with no ingredients
recipes <- recipes[recipes$Ingredients != "", ]
return(recipes)
}
load_recipes()
library(tidyverse)
load_recipes()
library(tidyverse)
#' Load Recipes
#'
#' Load and clean a database of cocktail recipes.
#'
#' @return A data.frame containing the cleaned cocktail recipes.
#' @export
load_recipes <- function() {
file_path <- system.file("extdata", "all_drinks.csv", package = "suggestCocktail")
recipes <- read_csv(file_path)
# Combine ingredient columns into a single column
ingredient_columns <- grep("^strIngredient", names(recipes), value = TRUE)
recipes$Ingredients <- apply(recipes[ingredient_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Combine measurement columns into a single column
measure_columns <- grep("^strMeasure", names(recipes), value = TRUE)
recipes$Measurements <- apply(recipes[measure_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Keep only necessary columns
recipes <- recipes[, c("strDrink", "idDrink", "strAlcoholic", "strCategory", "Ingredients", "Measurements", "strInstructions")]
# Remove rows with no ingredients
recipes <- recipes[recipes$Ingredients != "", ]
return(recipes)
}
recipes$Ingredients <- apply(recipes[ingredient_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
load_recipes()
library(tidyverse)
library(tidyverse)
#' Load Recipes
#'
#' Load and clean a database of cocktail recipes.
#'
#' @return A data.frame containing the cleaned cocktail recipes.
#' @export
load_recipes <- function() {
file_path <- system.file("extdata", "all_drinks.csv", package = "suggestCocktail")
recipes <- read_csv(file_path)
# Combine ingredient columns into a single column
ingredient_columns <- grep("^strIngredient", names(recipes), value = TRUE)
recipes$Ingredients <- apply(recipes[ingredient_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Combine measurement columns into a single column
measure_columns <- grep("^strMeasure", names(recipes), value = TRUE)
recipes$Measurements <- apply(recipes[measure_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Keep only necessary columns
recipes <- recipes[, c("strDrink", "idDrink", "strAlcoholic", "strCategory", "Ingredients", "Measurements", "strInstructions")]
# Remove rows with no ingredients
recipes <- recipes[recipes$Ingredients != "", ]
return(recipes)
}
library(tidyverse)
load_recipes()
library(tidyverse)
#' Load Recipes
#'
#' Load and clean a database of cocktail recipes.
#'
#' @return A data.frame containing the cleaned cocktail recipes.
#' @export
load_recipes <- function() {
recipes <- read_csv("all_drinks.csv")
# Combine ingredient columns into a single column
ingredient_columns <- grep("^strIngredient", names(recipes), value = TRUE)
recipes$Ingredients <- apply(recipes[ingredient_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Combine measurement columns into a single column
measure_columns <- grep("^strMeasure", names(recipes), value = TRUE)
recipes$Measurements <- apply(recipes[measure_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Keep only necessary columns
recipes <- recipes[, c("strDrink", "idDrink", "strAlcoholic", "strCategory", "Ingredients", "Measurements", "strInstructions")]
# Remove rows with no ingredients
recipes <- recipes[recipes$Ingredients != "", ]
return(recipes)
}
load_recipes()
library(tidyverse)
#' Load Recipes
#'
#' Load and clean a database of cocktail recipes.
#'
#' @return A data.frame containing the cleaned cocktail recipes.
#' @export
load_recipes <- function() {
recipes <- read_csv("/R/all_drinks.csv")
# Combine ingredient columns into a single column
ingredient_columns <- grep("^strIngredient", names(recipes), value = TRUE)
recipes$Ingredients <- apply(recipes[ingredient_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Combine measurement columns into a single column
measure_columns <- grep("^strMeasure", names(recipes), value = TRUE)
recipes$Measurements <- apply(recipes[measure_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Keep only necessary columns
recipes <- recipes[, c("strDrink", "idDrink", "strAlcoholic", "strCategory", "Ingredients", "Measurements", "strInstructions")]
# Remove rows with no ingredients
recipes <- recipes[recipes$Ingredients != "", ]
return(recipes)
}
load_recipes()
library(tidyverse)
#' Load Recipes
#'
#' Load and clean a database of cocktail recipes.
#'
#' @return A data.frame containing the cleaned cocktail recipes.
#' @export
load_recipes <- function() {
recipes <- read_csv("~/R/all_drinks.csv")
# Combine ingredient columns into a single column
ingredient_columns <- grep("^strIngredient", names(recipes), value = TRUE)
recipes$Ingredients <- apply(recipes[ingredient_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Combine measurement columns into a single column
measure_columns <- grep("^strMeasure", names(recipes), value = TRUE)
recipes$Measurements <- apply(recipes[measure_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Keep only necessary columns
recipes <- recipes[, c("strDrink", "idDrink", "strAlcoholic", "strCategory", "Ingredients", "Measurements", "strInstructions")]
# Remove rows with no ingredients
recipes <- recipes[recipes$Ingredients != "", ]
return(recipes)
}
library(tidyverse)
#' Load Recipes
#'
#' Load and clean a database of cocktail recipes.
#'
#' @return A data.frame containing the cleaned cocktail recipes.
#' @export
load_recipes <- function() {
recipes <- read_csv("~/R/all_drinks.csv")
# Combine ingredient columns into a single column
ingredient_columns <- grep("^strIngredient", names(recipes), value = TRUE)
recipes$Ingredients <- apply(recipes[ingredient_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Combine measurement columns into a single column
measure_columns <- grep("^strMeasure", names(recipes), value = TRUE)
recipes$Measurements <- apply(recipes[measure_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Keep only necessary columns
recipes <- recipes[, c("strDrink", "idDrink", "strAlcoholic", "strCategory", "Ingredients", "Measurements", "strInstructions")]
# Remove rows with no ingredients
recipes <- recipes[recipes$Ingredients != "", ]
return(recipes)
}
load_recipes()
library(tidyverse)
#' Load Recipes
#'
#' Load and clean a database of cocktail recipes.
#'
#' @return A data.frame containing the cleaned cocktail recipes.
#' @export
load_recipes <- function() {
file_path <- file.path("R", "all_drinks.csv")
recipes <- read_csv(file_path)
# Combine ingredient columns into a single column
ingredient_columns <- grep("^strIngredient", names(recipes), value = TRUE)
recipes$Ingredients <- apply(recipes[ingredient_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Combine measurement columns into a single column
measure_columns <- grep("^strMeasure", names(recipes), value = TRUE)
recipes$Measurements <- apply(recipes[measure_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Keep only necessary columns
recipes <- recipes[, c("strDrink", "idDrink", "strAlcoholic", "strCategory", "Ingredients", "Measurements", "strInstructions")]
# Remove rows with no ingredients
recipes <- recipes[recipes$Ingredients != "", ]
return(recipes)
}
load_recipes()
View(df)
df <- load_recipes()
View(df)
#' Get Recipe
#'
#' Get the recipe for a specific cocktail by name.
#'
#' @param cocktail_name A character string specifying the name of the cocktail.
#' @return A data.frame containing the cocktail recipe.
#' @export
get_recipe <- function(cocktail_name) {
recipes <- load_recipes()
recipe <- filter_recipe(recipes, cocktail_name)
if (nrow(recipe) == 0) {
return("Cocktail not found.")
} else {
return(recipe)
}
}
# Helper function to filter recipes based on name
filter_recipe <- function(recipes, cocktail_name) {
recipes <- recipes[recipes$Drink == cocktail_name, ]
recipes
}
View(df)
#' Suggest Random Cocktail
#'
#' Suggest a random cocktail based on category.
#'
#' @param category A character string specifying the category of the drink (e.g., "Cocktail", "Shot").
#' @return A data.frame containing the randomly selected cocktail recipe.
#' @export
suggest_random <- function(category) {
recipes <- load_recipes()
category_recipes <- filter_category(recipes, category)
if (nrow(category_recipes) == 0) {
return("No matching cocktails found.")
} else {
return(category_recipes[sample(nrow(category_recipes), 1), ])
}
}
# Helper function to filter recipes based on category
filter_category <- function(recipes, category) {
recipes <- recipes[recipes$strCategory == category, ]
recipes
}
View(df)
suggest_random("Shot")
return(recipe)
library(tidyverse)
#' Load Recipes
#'
#' Load and clean a database of cocktail recipes.
#'
#' @return A data.frame containing the cleaned cocktail recipes.
#' @export
load_recipes <- function() {
file_path <- file.path("R", "all_drinks.csv")
recipes <- suppressMessages(suppressWarnings(read_csv(file_path)))
# Combine ingredient columns into a single column
ingredient_columns <- grep("^strIngredient", names(recipes), value = TRUE)
recipes$Ingredients <- apply(recipes[ingredient_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Combine measurement columns into a single column
measure_columns <- grep("^strMeasure", names(recipes), value = TRUE)
recipes$Measurements <- apply(recipes[measure_columns], 1, function(x) paste(na.omit(x), collapse = ", "))
# Keep only necessary columns
recipes <- recipes[, c("strDrink", "idDrink", "strAlcoholic", "strCategory", "Ingredients", "Measurements", "strInstructions")]
# Remove rows with no ingredients
recipes <- recipes[recipes$Ingredients != "", ]
return(recipes)
}
suggest_random("Shot")
suggest_random("Beer")
unique(load_recipes()$strCategory)
#' Suggest Random Cocktail
#'
#' Suggest a random cocktail based on category.
#'
#' @param category A character string specifying the category of the drink (e.g., "Cocktail", "Shot").
#' @return A data.frame containing the randomly selected cocktail recipe.
#' @export
suggest_random <- function(category = c("Cocktail","Shot","Beer","Milk / Float / Shake","Ordinary Drink","Other/Unknown","Homemade Liqueur","Punch / Party Drink", "Coffee / Tea", "Soft Drink / Soda", "Cocoa")) {
recipes <- load_recipes()
category_recipes <- filter_category(recipes, category)
if (nrow(category_recipes) == 0) {
return("No matching cocktails found.")
} else {
return(category_recipes[sample(nrow(category_recipes), 1), ])
}
}
# Helper function to filter recipes based on category
filter_category <- function(recipes, category) {
recipes <- recipes[recipes$strCategory == category, ]
recipes
}
